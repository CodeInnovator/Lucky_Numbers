package lucky_stats.analyzer;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;



public class Parser {
int[] distribution;
double[] result;
int counter;
	public Parser() throws FileNotFoundException{
		distribution = new int[50];
		reader();
		
	}
	
	public static File unpackArchive(URL url, File targetDir) throws IOException {
	      if (!targetDir.exists()) {
	          targetDir.mkdirs();
	      }
	      InputStream in = new BufferedInputStream(url.openStream(), 1024);
	      // make sure we get the actual file
	      File zip = File.createTempFile("arc", ".zip", targetDir);
	      OutputStream out = new BufferedOutputStream(new FileOutputStream(zip));
	      copyInputStream(in, out);
	      out.close();
	      return unpackArchive(zip, targetDir);
	  }	

	  public static File unpackArchive(File theFile, File targetDir) throws IOException {
	      if (!theFile.exists()) {
	          throw new IOException(theFile.getAbsolutePath() + " does not exist");
	      }
	      if (!buildDirectory(targetDir)) {
	          throw new IOException("Could not create directory: " + targetDir);
	      }
	      ZipFile zipFile = new ZipFile(theFile);
	      for (Enumeration entries = zipFile.entries(); entries.hasMoreElements();) {
	          ZipEntry entry = (ZipEntry) entries.nextElement();
	          File file = new File(targetDir, File.separator + entry.getName());
	          if (!buildDirectory(file.getParentFile())) {
	              throw new IOException("Could not create directory: " + file.getParentFile());
	          }
	          if (!entry.isDirectory()) {
	              copyInputStream(zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(file)));
	          } else {
	              if (!buildDirectory(file)) {
	                  throw new IOException("Could not create directory: " + file);
	              }
	          }
	      }
	      zipFile.close();
	      return theFile;
	  }
	
	  public static void copyInputStream(InputStream in, OutputStream out) throws IOException {
	      byte[] buffer = new byte[1024];
	      int len = in.read(buffer);
	      while (len >= 0) {
	          out.write(buffer, 0, len);
	          len = in.read(buffer);
	      }
	      in.close();
	      out.close();
	  }

	  public static boolean buildDirectory(File file) {
	      return file.exists() || file.mkdirs();
	  }

	
	
	public void reader() throws FileNotFoundException {
		String file = "/Users/KB/JAVA_Developement/LOTTOMAX.csv";
		BufferedReader br = null;
		String line = "";
		String cvsSplitBy = ",";
		String n1;
		int nb1;
		
		try {
			 counter = 0;
			br = new BufferedReader(new FileReader(file));
			while ((line = br.readLine()) != null) {
			        // use comma as separator
				
				String[] draws = line.split(cvsSplitBy);
				if(draws[0].contains("PRODUCT")){
					continue;
				} else{
					preAnalyze(draws[4]);
					preAnalyze(draws[5]);
					preAnalyze(draws[6]);
					preAnalyze(draws[7]);
					preAnalyze(draws[8]);
					preAnalyze(draws[9]);
					preAnalyze(draws[10]);
					
				}
				
			}
	 
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (br != null) {
				try {
					br.close();
					
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	 
		
	  }
	
	private void preAnalyze(String numb) {
		String n;
		int nb1; 
		n = numb;
		nb1 = Integer.parseInt(n);
		counter++;
		distribution[nb1]++;
	//	System.out.println(nb1);
	
	}
	public double[] analyze(){
		double prob;
		double sumup;
		sumup = 0;
		result = new double[50];
		for(int i = 0; i<= 49; i++){
		double a =	(double) distribution[i];
		double b = (double) counter;
			prob =  a/b * 100;
			result[i] = prob;
		
		System.out.println(result[i]);
		}
		return result;
	}
	
	
}
		
